// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  Booking       Booking[] // um usuário vai ter varios agendamentos 
}

model Barbershop {
  id       String    @id @default(uuid())
  name     String
  address  String
  imageUrl String
  services Service[] // uma barbearia vai ter varios serviços
  bookings Booking[] // uma barbearia vai ter varios agendamentos
}

model Service {
  id           String     @id @default(uuid())
  name         String
  price        Decimal    @db.Decimal(10, 2)
  description  String
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[] // um serviço vai ter varios agendamentos
  imageUrl     String
}

model Booking {
  id           String     @id @default(uuid())
  date         DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id]) // um agendamento vai ter uma barbearia
  serviceId    String
  service      Service    @relation(fields: [serviceId], references: [id]) // um agendamento vai ter um serviço
  userId       String
  user         User       @relation(fields: [userId], references: [id]) // um agendamento vai ter um usuário
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
